<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="20" skipped="0" tests="25" time="0.138" timestamp="2025-02-04T10:46:23.428467+05:30" hostname="Tilaks-MacBook-Air.local"><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_with_total_failure" time="0.001" /><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_with_valid_scan_result" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">sample_scan_result = '00|1.1|h2|alpn,00|1.2|h2|alpn,00|1.3|h2|alpn'

    def test_jarm_with_valid_scan_result(sample_scan_result):
&gt;       result = Hasher.jarm(sample_scan_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_with_empty_scan_result" time="0.000"><failure message="IndexError: list index out of range">def test_jarm_with_empty_scan_result():
&gt;       result = Hasher.jarm("")

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

scan_result = ''

    @staticmethod
    def jarm(scan_result: str):
        """"""
        logging.debug(f"Raw JARM: {scan_result}")
        if scan_result == TOTAL_FAILURE:
            return "0" * 62
        fuzzy_hash = ""
        alpns_and_ext = ""
        for handshake in scan_result.split(","):
            components = handshake.split("|")
            # Custom jarm hash includes a fuzzy hash of the ciphers and versions
            fuzzy_hash += Hasher._cipher_bytes(components[0])
&gt;           fuzzy_hash += Hasher._version_byte(components[1])
E           IndexError: list index out of range

jarm/hashing/hashing.py:93: IndexError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_bytes[-00]" time="0.000" /><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_bytes[0004-01]" time="0.000" /><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_bytes[0005-02]" time="0.000" /><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_bytes[1305-44]" time="0.001"><failure message="AssertionError: assert '45' == '44'&#10;  &#10;  - 44&#10;  + 45">cipher = '1305', expected = '44'

    @pytest.mark.parametrize("cipher,expected", [
        ("", "00"),
        ("0004", "01"),
        ("0005", "02"),
        ("1305", "44"),
    ])
    def test_cipher_bytes(cipher, expected):
        result = Hasher._cipher_bytes(cipher)
&gt;       assert result == expected
E       AssertionError: assert '45' == '44'
E         
E         - 44
E         + 45

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:33: AssertionError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[-0]" time="0.000" /><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.0-a]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.0', expected = 'a'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.0'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.1-b]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.1', expected = 'b'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.2-c]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.2', expected = 'c'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.2'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.3-d]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.3', expected = 'd'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.3'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.4-e]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.4', expected = 'e'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.4'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte[1.5-f]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '1.5', expected = 'f'

    @pytest.mark.parametrize("version,expected", [
        ("", "0"),
        ("1.0", "a"),
        ("1.1", "b"),
        ("1.2", "c"),
        ("1.3", "d"),
        ("1.4", "e"),
        ("1.5", "f"),
    ])
    def test_version_byte(version, expected):
&gt;       result = Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.5'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_logging" time="0.002"><failure message="ValueError: invalid literal for int() with base 10: ''">sample_scan_result = '00|1.1|h2|alpn,00|1.2|h2|alpn,00|1.3|h2|alpn'

    def test_jarm_logging(sample_scan_result):
        with patch('logging.debug') as mock_debug:
&gt;           Hasher.jarm(sample_scan_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_sha256_calculation" time="0.001"><failure message="ValueError: invalid literal for int() with base 10: ''">sample_scan_result = '00|1.1|h2|alpn,00|1.2|h2|alpn,00|1.3|h2|alpn'

    def test_jarm_sha256_calculation(sample_scan_result):
        with patch('hashlib.sha256') as mock_sha256:
            mock_sha256.return_value.hexdigest.return_value = 'a' * 64
&gt;           result = Hasher.jarm(sample_scan_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_with_invalid_scan_result" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: 'm'">def test_jarm_with_invalid_scan_result():
        invalid_result = "invalid|format|data"
        with pytest.raises(IndexError):
&gt;           Hasher.jarm(invalid_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = 'format'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: 'm'

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_bytes_with_unknown_cipher" time="0.000"><failure message="AssertionError: assert '46' == '44'&#10;  &#10;  - 44&#10;  + 46">def test_cipher_bytes_with_unknown_cipher():
        unknown_cipher = "ffff"
        result = Hasher._cipher_bytes(unknown_cipher)
&gt;       assert result == "44"  # Assuming the list has 68 elements
E       AssertionError: assert '46' == '44'
E         
E         - 44
E         + 46

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:67: AssertionError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte_with_invalid_version[2.0]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '2.0'

    @pytest.mark.parametrize("version", ["2.0", "3.0", "4.0"])
    def test_version_byte_with_invalid_version(version):
        with pytest.raises(IndexError):
&gt;           Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '2.0'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte_with_invalid_version[3.0]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '3.0'

    @pytest.mark.parametrize("version", ["2.0", "3.0", "4.0"])
    def test_version_byte_with_invalid_version(version):
        with pytest.raises(IndexError):
&gt;           Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '3.0'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_version_byte_with_invalid_version[4.0]" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">version = '4.0'

    @pytest.mark.parametrize("version", ["2.0", "3.0", "4.0"])
    def test_version_byte_with_invalid_version(version):
        with pytest.raises(IndexError):
&gt;           Hasher._version_byte(version)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:72: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '4.0'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_integration" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">def test_jarm_integration():
        scan_result = "0004|1.1|h2|alpn,0005|1.2|h3|ext,0007|1.3|h2h3|alpn,ext"
&gt;       result = Hasher.jarm(scan_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_cipher_list_immutability" time="0.000"><failure message="Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;">def test_cipher_list_immutability():
        original_list = Hasher.CIPHER_LIST.copy()
&gt;       with pytest.raises(AttributeError):
E       Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:85: Failed</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_with_maximum_ciphers" time="0.000"><failure message="IndexError: list index out of range">def test_jarm_with_maximum_ciphers():
        max_ciphers = ",".join([f"{cipher.hex()}|1.1|h2|alpn" for cipher in Hasher.CIPHER_LIST])
&gt;       result = Hasher.jarm(max_ciphers)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:91: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

scan_result = ''

    @staticmethod
    def jarm(scan_result: str):
        """"""
        logging.debug(f"Raw JARM: {scan_result}")
        if scan_result == TOTAL_FAILURE:
            return "0" * 62
        fuzzy_hash = ""
        alpns_and_ext = ""
        for handshake in scan_result.split(","):
            components = handshake.split("|")
            # Custom jarm hash includes a fuzzy hash of the ciphers and versions
            fuzzy_hash += Hasher._cipher_bytes(components[0])
&gt;           fuzzy_hash += Hasher._version_byte(components[1])
E           IndexError: list index out of range

jarm/hashing/hashing.py:93: IndexError</failure></testcase><testcase classname="baserock_generated_tests.baserock_test_hashing" name="test_jarm_performance" time="0.000"><failure message="ValueError: invalid literal for int() with base 10: ''">def test_jarm_performance():
        import time
        scan_result = "0004|1.1|h2|alpn," * 1000  # Large input
        start_time = time.time()
&gt;       Hasher.jarm(scan_result)

jarm/hashing/baserock_generated_tests/baserock_test_hashing.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
jarm/hashing/hashing.py:93: in jarm
    fuzzy_hash += Hasher._version_byte(components[1])
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

version = '1.1'

    @staticmethod
    def _version_byte(version: str):
        if version == "":
            return "0"
        options = "abcdef"
&gt;       count = int(version[3:4])
E       ValueError: invalid literal for int() with base 10: ''

jarm/hashing/hashing.py:124: ValueError</failure></testcase></testsuite></testsuites>