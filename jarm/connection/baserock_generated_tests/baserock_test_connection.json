[
    {
        "timestamp": "2025-02-04T10-33-06.065607",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/connection/connection.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/connection/baserock_generated_tests/baserock_test_connection.py",
        "test_code": "import pytest\nimport asyncio\nimport socket\nimport ssl\nfrom unittest.mock import patch, MagicMock, AsyncMock\nfrom jarm.connection.connection import Connection\nfrom jarm.constants import DEFAULT_TIMEOUT\nfrom jarm.exceptions.exceptions import PyJARMInvalidProxy\nfrom jarm.proxy.proxy import Proxy\n\n@pytest.fixture\ndef mock_open_connection():\n    with patch('asyncio.open_connection') as mock:\n        yield mock\n\n@pytest.fixture\ndef mock_proxy_handle():\n    with patch('jarm.proxy.proxy.Proxy.handle_proxy') as mock:\n        yield mock\n\n@pytest.mark.asyncio\nasync def test_prep_connection_without_proxy(mock_open_connection):\n    mock_reader = AsyncMock()\n    mock_writer = AsyncMock()\n    mock_open_connection.return_value = (mock_reader, mock_writer)\n\n    connect_target = {\n        \"connect_host\": \"example.com\",\n        \"connect_port\": 443,\n        \"address_family\": socket.AF_INET,\n        \"ssl\": None,\n        \"server_hostname\": \"example.com\",\n        \"use_proxy\": False\n    }\n\n    reader, writer = await Connection.prep_connection(connect_target)\n\n    mock_open_connection.assert_called_once_with(\n        host=\"example.com\",\n        port=443,\n        family=socket.AF_INET,\n        proto=socket.IPPROTO_TCP,\n        ssl=None,\n        server_hostname=\"example.com\"\n    )\n    assert reader == mock_reader\n    assert writer == mock_writer\n\n@pytest.mark.asyncio\nasync def test_prep_connection_with_proxy(mock_open_connection, mock_proxy_handle):\n    mock_reader = AsyncMock()\n    mock_writer = AsyncMock()\n    mock_open_connection.return_value = (mock_reader, mock_writer)\n\n    connect_target = {\n        \"connect_host\": \"proxy.example.com\",\n        \"connect_port\": 8080,\n        \"address_family\": socket.AF_INET,\n        \"ssl\": None,\n        \"server_hostname\": None,\n        \"use_proxy\": True,\n        \"target_host\": \"target.example.com\",\n        \"target_port\": 443,\n        \"proxy_auth\": \"basic\",\n        \"proxy_username\": \"user\",\n        \"proxy_password\": \"pass\"\n    }\n\n    reader, writer = await Connection.prep_connection(connect_target)\n\n    mock_open_connection.assert_called_once_with(\n        host=\"proxy.example.com\",\n        port=8080,\n        family=socket.AF_INET,\n        proto=socket.IPPROTO_TCP,\n        ssl=None,\n        server_hostname=None\n    )\n    mock_proxy_handle.assert_called_once_with(\n        mock_reader,\n        mock_writer,\n        \"target.example.com:443\",\n        \"basic\",\n        \"user\",\n        \"pass\"\n    )\n    assert reader == mock_reader\n    assert writer == mock_writer\n\n@pytest.mark.asyncio\nasync def test_jarm_data(mock_open_connection):\n    mock_reader = AsyncMock()\n    mock_writer = AsyncMock()\n    mock_open_connection.return_value = (mock_reader, mock_writer)\n    mock_reader.read.return_value = b\"mock_response\"\n\n    conn_target = {\n        \"connect_host\": \"example.com\",\n        \"connect_port\": 443,\n        \"address_family\": socket.AF_INET,\n        \"ssl\": None,\n        \"server_hostname\": \"example.com\",\n        \"use_proxy\": False\n    }\n    data = b\"test_data\"\n\n    result = await Connection.jarm_data(conn_target, data)\n\n    mock_writer.write.assert_called_once_with(data)\n    mock_writer.drain.assert_called_once()\n    mock_reader.read.assert_called_once_with(1484)\n    mock_writer.close.assert_called_once()\n    mock_writer.wait_closed.assert_called_once()\n    assert result == b\"mock_response\"\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_without_proxy():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data:\n        mock_jarm_data.return_value = b\"mock_response\"\n        result = await Connection.jarm_connect(target, connect_args, data, check)\n\n    assert result == (check, b\"mock_response\")\n    mock_jarm_data.assert_called_once()\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_with_proxy():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://proxy.example.com:8080\",\n        \"proxy_auth\": \"basic\"\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n        mock_jarm_data.return_value = b\"mock_response\"\n        mock_parse_proxy.return_value = Proxy(scheme=\"http\", hostname=\"proxy.example.com\", port=8080)\n        result = await Connection.jarm_connect(target, connect_args, data, check)\n\n    assert result == (check, b\"mock_response\")\n    mock_jarm_data.assert_called_once()\n    mock_parse_proxy.assert_called_once_with(\"http://proxy.example.com:8080\")\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_address_family():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": 999,  # Invalid address family\n        \"timeout\": 30,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with pytest.raises(ValueError, match=\"AddressFamily not supported\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_string():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": 123  # Invalid proxy string (should be str)\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with pytest.raises(ValueError, match=\"Proxy string must be str\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_auth():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://proxy.example.com:8080\",\n        \"proxy_auth\": 123  # Invalid proxy_auth (should be str)\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with pytest.raises(ValueError, match=\"proxy auth must be str\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_verify():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": \"True\"  # Invalid verify (should be bool)\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with pytest.raises(ValueError, match=\"verify must be boolean\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_hostname():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://:8080\"  # Invalid proxy (missing hostname)\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n        mock_parse_proxy.return_value = Proxy(scheme=\"http\", hostname=\"\", port=8080)\n        with pytest.raises(PyJARMInvalidProxy, match=\"Invalid or missing proxy hostname\"):\n            await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_scheme():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"ftp://proxy.example.com:8080\"  # Invalid proxy scheme\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n        mock_parse_proxy.return_value = Proxy(scheme=\"ftp\", hostname=\"proxy.example.com\", port=8080)\n        with pytest.raises(PyJARMInvalidProxy, match=\"Invalid proxy connection scheme\"):\n            await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_timeout():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 1,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n\n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data:\n        mock_jarm_data.side_effect = asyncio.TimeoutError()\n        result = await Connection.jarm_connect(target, connect_args, data, check)\n\n    assert result == (check, b\"\")\n    mock_jarm_data.assert_called_once()\n\n",
        "test_results": {
            "passed": 9,
            "failed": 3,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"0\" failures=\"3\" skipped=\"0\" tests=\"12\" time=\"0.101\" timestamp=\"2025-02-04T10:33:02.823719+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_prep_connection_without_proxy\" time=\"0.006\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_prep_connection_with_proxy\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_data\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_without_proxy\" time=\"0.007\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_with_proxy\" time=\"0.001\"><failure message=\"TypeError: Proxy() takes no arguments\">@pytest.mark.asyncio\n    async def test_jarm_connect_with_proxy():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": True,\n            \"proxy\": \"http://proxy.example.com:8080\",\n            \"proxy_auth\": \"basic\"\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n            mock_jarm_data.return_value = b\"mock_response\"\n&gt;           mock_parse_proxy.return_value = Proxy(scheme=\"http\", hostname=\"proxy.example.com\", port=8080)\nE           TypeError: Proxy() takes no arguments\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:150: TypeError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_address_family\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_string\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_auth\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_verify\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_hostname\" time=\"0.001\"><failure message=\"TypeError: Proxy() takes no arguments\">@pytest.mark.asyncio\n    async def test_jarm_connect_invalid_proxy_hostname():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": True,\n            \"proxy\": \"http://:8080\"  # Invalid proxy (missing hostname)\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n&gt;           mock_parse_proxy.return_value = Proxy(scheme=\"http\", hostname=\"\", port=8080)\nE           TypeError: Proxy() takes no arguments\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:229: TypeError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_scheme\" time=\"0.001\"><failure message=\"TypeError: Proxy() takes no arguments\">@pytest.mark.asyncio\n    async def test_jarm_connect_invalid_proxy_scheme():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": True,\n            \"proxy\": \"ftp://proxy.example.com:8080\"  # Invalid proxy scheme\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy:\n&gt;           mock_parse_proxy.return_value = Proxy(scheme=\"ftp\", hostname=\"proxy.example.com\", port=8080)\nE           TypeError: Proxy() takes no arguments\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:246: TypeError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_timeout\" time=\"0.002\" /></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 77.0,
            "missing_lines": []
        }
    },
    {
        "timestamp": "2025-02-04T10-34-19.604346",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/connection/connection.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/connection/baserock_generated_tests/baserock_test_connection.py",
        "test_code": "import asyncio\nimport pytest\nfrom unittest.mock import patch, AsyncMock, MagicMock\nfrom typing import Dict, Any\n\nfrom jarm.connection.connection import Connection\nfrom jarm.proxy.proxy import Proxy\nfrom jarm.exceptions.exceptions import PyJARMInvalidProxy\nfrom jarm.constants import DEFAULT_TIMEOUT\n\n@pytest.mark.asyncio\nasync def test_prep_connection():\n    connect_target = {\n        \"connect_host\": \"example.com\",\n        \"connect_port\": 443,\n        \"use_proxy\": False\n    }\n    \n    with patch('asyncio.open_connection', new_callable=AsyncMock) as mock_open_connection:\n        mock_reader, mock_writer = MagicMock(), MagicMock()\n        mock_open_connection.return_value = (mock_reader, mock_writer)\n        \n        reader, writer = await Connection.prep_connection(connect_target)\n        \n        assert reader == mock_reader\n        assert writer == mock_writer\n        mock_open_connection.assert_called_once_with(\n            host=\"example.com\",\n            port=443,\n            ssl=None,\n            server_hostname=None,\n            family=0\n        )\n\n@pytest.mark.asyncio\nasync def test_prep_connection_with_proxy():\n    connect_target = {\n        \"connect_host\": \"example.com\",\n        \"connect_port\": 443,\n        \"use_proxy\": True,\n        \"target_host\": \"target.com\",\n        \"target_port\": 8080,\n        \"proxy_auth\": \"basic_auth\"\n    }\n    \n    with patch('asyncio.open_connection', new_callable=AsyncMock) as mock_open_connection, \\\n         patch('jarm.proxy.proxy.Proxy.handle_proxy', new_callable=AsyncMock) as mock_handle_proxy:\n        mock_reader, mock_writer = MagicMock(), MagicMock()\n        mock_open_connection.return_value = (mock_reader, mock_writer)\n        \n        reader, writer = await Connection.prep_connection(connect_target)\n        \n        assert reader == mock_reader\n        assert writer == mock_writer\n        mock_open_connection.assert_called_once_with(\n            host=\"example.com\",\n            port=443,\n            ssl=None,\n            server_hostname=None,\n            family=0\n        )\n        mock_handle_proxy.assert_called_once_with(\n            \"target.com:8080\",\n            mock_writer,\n            auth=\"basic_auth\"\n        )\n\n@pytest.mark.asyncio\nasync def test_jarm_data():\n    conn_target = {\n        \"connect_host\": \"example.com\",\n        \"connect_port\": 443\n    }\n    data = b\"test_data\"\n    \n    with patch('jarm.connection.connection.Connection.prep_connection', new_callable=AsyncMock) as mock_prep_connection:\n        mock_reader, mock_writer = AsyncMock(), AsyncMock()\n        mock_prep_connection.return_value = (mock_reader, mock_writer)\n        mock_reader.read.return_value = b\"response_data\"\n        \n        result = await Connection.jarm_data(conn_target, data)\n        \n        assert result == b\"response_data\"\n        mock_writer.write.assert_called_once_with(data)\n        mock_writer.drain.assert_called_once()\n        mock_reader.read.assert_called_once_with(1484)\n        mock_writer.close.assert_called_once()\n        mock_writer.wait_closed.assert_called_once()\n\n@pytest.mark.asyncio\nasync def test_jarm_connect():\n    target = (\"example.com\", 443)\n    connect_args: Dict[str, Any] = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_jarm_data.return_value = b\"mock_response\"\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        result = await Connection.jarm_connect(target, connect_args, data, check)\n        \n        assert result == (\"test_check\", b\"mock_response\")\n        mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\n        mock_jarm_data.assert_called_once()\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_with_proxy():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://proxy.example.com:8080\",\n        \"proxy_auth\": \"basic\"\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_jarm_data.return_value = b\"mock_response\"\n        mock_proxy = MagicMock()\n        mock_proxy.scheme = \"http\"\n        mock_proxy.hostname = \"proxy.example.com\"\n        mock_proxy.port = 8080\n        mock_proxy.username = None\n        mock_proxy.password = None\n        mock_parse_proxy.return_value = mock_proxy\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        result = await Connection.jarm_connect(target, connect_args, data, check)\n        \n        assert result == (\"test_check\", b\"mock_response\")\n        mock_parse_proxy.assert_called_once_with(\"http://proxy.example.com:8080\")\n        mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\n        mock_jarm_data.assert_called_once()\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_hostname():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://:8080\"  # Invalid proxy (missing hostname)\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_proxy = MagicMock()\n        mock_proxy.scheme = \"http\"\n        mock_proxy.hostname = \"\"\n        mock_proxy.port = 8080\n        mock_parse_proxy.return_value = mock_proxy\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        with pytest.raises(PyJARMInvalidProxy, match=\"Invalid or missing proxy hostname\"):\n            await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_scheme():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"ftp://proxy.example.com:8080\"  # Invalid proxy scheme\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_proxy = MagicMock()\n        mock_proxy.scheme = \"ftp\"\n        mock_proxy.hostname = \"proxy.example.com\"\n        mock_proxy.port = 8080\n        mock_parse_proxy.return_value = mock_proxy\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        with pytest.raises(PyJARMInvalidProxy, match=\"Invalid proxy connection scheme\"):\n            await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_timeout():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 1,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_jarm_data.side_effect = asyncio.TimeoutError()\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        result = await Connection.jarm_connect(target, connect_args, data, check)\n        \n        assert result == (\"test_check\", b\"\")\n        mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\n        mock_jarm_data.assert_called_once()\n\ndef test_address_family():\n    assert Connection.AddressFamily.AF_ANY == 0\n    assert Connection.AddressFamily.AF_INET == 2\n    assert Connection.AddressFamily.AF_INET6 == 10\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_address_family():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": 999,  # Invalid address family\n        \"timeout\": 30,\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with pytest.raises(ValueError, match=\"AddressFamily not supported\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_timeout():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": \"invalid\",  # Invalid timeout\n        \"verify\": True\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n        mock_jarm_data.return_value = b\"mock_response\"\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        \n        result = await Connection.jarm_connect(target, connect_args, data, check)\n        \n        assert result == (\"test_check\", b\"mock_response\")\n        mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\n        mock_jarm_data.assert_called_once()\n        # Verify that DEFAULT_TIMEOUT was used\n        assert mock_jarm_data.call_args[0][0][\"timeout\"] == DEFAULT_TIMEOUT\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_type():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": 12345  # Invalid proxy type\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with pytest.raises(ValueError, match=\"Proxy string must be str\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_proxy_auth_type():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": True,\n        \"proxy\": \"http://proxy.example.com:8080\",\n        \"proxy_auth\": 12345  # Invalid proxy_auth type\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with pytest.raises(ValueError, match=\"proxy auth must be str\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_invalid_verify_type():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": \"invalid\"  # Invalid verify type\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with pytest.raises(ValueError, match=\"verify must be boolean\"):\n        await Connection.jarm_connect(target, connect_args, data, check)\n\n@pytest.mark.asyncio\nasync def test_jarm_connect_https_proxy():\n    target = (\"example.com\", 443)\n    connect_args = {\n        \"address_family\": Connection.AddressFamily.AF_INET,\n        \"timeout\": 30,\n        \"verify\": False,\n        \"proxy\": \"https://proxy.example.com:8443\"\n    }\n    data = b\"test_data\"\n    check = \"test_check\"\n    \n    with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n         patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n         patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target, \\\n         patch('ssl.create_default_context') as mock_create_default_context:\n        mock_jarm_data.return_value = b\"mock_response\"\n        mock_proxy = MagicMock()\n        mock_proxy.scheme = \"https\"\n        mock_proxy.hostname = \"proxy.example.com\"\n        mock_proxy.port = 8443\n        mock_proxy.username = None\n        mock_proxy.password = None\n        mock_parse_proxy.return_value = mock_proxy\n        mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n        mock_ssl_context = MagicMock()\n        mock_create_default_context.return_value = mock_ssl_context\n        \n        result = await Connection.jarm_connect(target, connect_args, data, check)\n        \n        assert result == (\"test_check\", b\"mock_response\")\n        mock_parse_proxy.assert_called_once_with(\"https://proxy.example.com:8443\")\n        mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\n        mock_jarm_data.assert_called_once()\n        mock_create_default_context.assert_called_once()\n        assert mock_ssl_context.verify_mode == ssl.CERT_NONE\n\n# Add more tests here to cover other scenarios and edge cases\n",
        "test_results": {
            "passed": 8,
            "failed": 7,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"0\" failures=\"7\" skipped=\"0\" tests=\"15\" time=\"0.549\" timestamp=\"2025-02-04T10:34:18.088556+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_prep_connection\" time=\"0.006\"><failure message=\"AssertionError: expected call not found.&#10;Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)&#10;  Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}&#10;  &#10;  Omitting 4 identical items, use -vv to show&#10;  Differing items:&#10;  {'family': None} != {'family': 0}&#10;  Left contains 1 more item:&#10;  {'proto': 6}&#10;  Use -v to get more diff\">self = &lt;AsyncMock name='open_connection' id='4375475744'&gt;, args = ()\nkwargs = {'family': 0, 'host': 'example.com', 'port': 443, 'server_hostname': None, ...}\nexpected = call(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nactual = call(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104d57b00&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE             Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;AsyncMock name='open_connection' id='4375475744'&gt;, args = ()\nkwargs = {'family': 0, 'host': 'example.com', 'port': 443, 'server_hostname': None, ...}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE         Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}\nE         \nE         Omitting 4 identical items, use -vv to show\nE         Differing items:\nE         {'family': None} != {'family': 0}\nE         Left contains 1 more item:\nE         {'proto': 6}\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_prep_connection():\n        connect_target = {\n            \"connect_host\": \"example.com\",\n            \"connect_port\": 443,\n            \"use_proxy\": False\n        }\n    \n        with patch('asyncio.open_connection', new_callable=AsyncMock) as mock_open_connection:\n            mock_reader, mock_writer = MagicMock(), MagicMock()\n            mock_open_connection.return_value = (mock_reader, mock_writer)\n    \n            reader, writer = await Connection.prep_connection(connect_target)\n    \n            assert reader == mock_reader\n            assert writer == mock_writer\n&gt;           mock_open_connection.assert_called_once_with(\n                host=\"example.com\",\n                port=443,\n                ssl=None,\n                server_hostname=None,\n                family=0\n            )\nE           AssertionError: expected call not found.\nE           Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE             Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\nE           \nE           pytest introspection follows:\nE           \nE           Kwargs:\nE           assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}\nE             \nE             Omitting 4 identical items, use -vv to show\nE             Differing items:\nE             {'family': None} != {'family': 0}\nE             Left contains 1 more item:\nE             {'proto': 6}\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:27: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_prep_connection_with_proxy\" time=\"0.002\"><failure message=\"AssertionError: expected call not found.&#10;Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)&#10;  Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)&#10;&#10;pytest introspection follows:&#10;&#10;Kwargs:&#10;assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}&#10;  &#10;  Omitting 4 identical items, use -vv to show&#10;  Differing items:&#10;  {'family': None} != {'family': 0}&#10;  Left contains 1 more item:&#10;  {'proto': 6}&#10;  Use -v to get more diff\">self = &lt;AsyncMock name='open_connection' id='4376418624'&gt;, args = ()\nkwargs = {'family': 0, 'host': 'example.com', 'port': 443, 'server_hostname': None, ...}\nexpected = call(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nactual = call(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104db9440&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE             Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;AsyncMock name='open_connection' id='4376418624'&gt;, args = ()\nkwargs = {'family': 0, 'host': 'example.com', 'port': 443, 'server_hostname': None, ...}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE         Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\nE       \nE       pytest introspection follows:\nE       \nE       Kwargs:\nE       assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}\nE         \nE         Omitting 4 identical items, use -vv to show\nE         Differing items:\nE         {'family': None} != {'family': 0}\nE         Left contains 1 more item:\nE         {'proto': 6}\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_prep_connection_with_proxy():\n        connect_target = {\n            \"connect_host\": \"example.com\",\n            \"connect_port\": 443,\n            \"use_proxy\": True,\n            \"target_host\": \"target.com\",\n            \"target_port\": 8080,\n            \"proxy_auth\": \"basic_auth\"\n        }\n    \n        with patch('asyncio.open_connection', new_callable=AsyncMock) as mock_open_connection, \\\n             patch('jarm.proxy.proxy.Proxy.handle_proxy', new_callable=AsyncMock) as mock_handle_proxy:\n            mock_reader, mock_writer = MagicMock(), MagicMock()\n            mock_open_connection.return_value = (mock_reader, mock_writer)\n    \n            reader, writer = await Connection.prep_connection(connect_target)\n    \n            assert reader == mock_reader\n            assert writer == mock_writer\n&gt;           mock_open_connection.assert_called_once_with(\n                host=\"example.com\",\n                port=443,\n                ssl=None,\n                server_hostname=None,\n                family=0\n            )\nE           AssertionError: expected call not found.\nE           Expected: open_connection(host='example.com', port=443, ssl=None, server_hostname=None, family=0)\nE             Actual: open_connection(host='example.com', port=443, family=None, proto=6, ssl=None, server_hostname=None)\nE           \nE           pytest introspection follows:\nE           \nE           Kwargs:\nE           assert {'family': No...roto': 6, ...} == {'family': 0,...e': None, ...}\nE             \nE             Omitting 4 identical items, use -vv to show\nE             Differing items:\nE             {'family': None} != {'family': 0}\nE             Left contains 1 more item:\nE             {'proto': 6}\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:55: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_data\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect\" time=\"0.007\"><failure message=\"AssertionError: expected call not found.&#10;Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)&#10;  Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)&#10;  &#10;  At index 0 diff: 'example.com' != ('example.com', 443)&#10;  Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;&#10;  Use -v to get more diff\">self = &lt;MagicMock name='validate_target' id='4376841584'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\nexpected = call(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nactual = call('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104e89080&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;MagicMock name='validate_target' id='4376841584'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE         Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE       \nE       pytest introspection follows:\nE       \nE       Args:\nE       assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE         \nE         At index 0 diff: 'example.com' != ('example.com', 443)\nE         Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_jarm_connect():\n        target = (\"example.com\", 443)\n        connect_args: Dict[str, Any] = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": True\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n            mock_jarm_data.return_value = b\"mock_response\"\n            mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n    \n            result = await Connection.jarm_connect(target, connect_args, data, check)\n    \n            assert result == (\"test_check\", b\"mock_response\")\n&gt;           mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE           \nE           pytest introspection follows:\nE           \nE           Args:\nE           assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE             \nE             At index 0 diff: 'example.com' != ('example.com', 443)\nE             Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:109: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_with_proxy\" time=\"0.002\"><failure message=\"AssertionError: expected call not found.&#10;Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)&#10;  Actual: validate_target('proxy.example.com', 8080, &lt;AddressFamily.AF_INET: 2&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)&#10;  &#10;  At index 0 diff: 'proxy.example.com' != ('example.com', 443)&#10;  Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;&#10;  Use -v to get more diff\">self = &lt;MagicMock name='validate_target' id='4376422656'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\nexpected = call(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nactual = call('proxy.example.com', 8080, &lt;AddressFamily.AF_INET: 2&gt;)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104e89620&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('proxy.example.com', 8080, &lt;AddressFamily.AF_INET: 2&gt;)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;MagicMock name='validate_target' id='4376422656'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE         Actual: validate_target('proxy.example.com', 8080, &lt;AddressFamily.AF_INET: 2&gt;)\nE       \nE       pytest introspection follows:\nE       \nE       Args:\nE       assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE         \nE         At index 0 diff: 'proxy.example.com' != ('example.com', 443)\nE         Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_jarm_connect_with_proxy():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": True,\n            \"proxy\": \"http://proxy.example.com:8080\",\n            \"proxy_auth\": \"basic\"\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n             patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n            mock_jarm_data.return_value = b\"mock_response\"\n            mock_proxy = MagicMock()\n            mock_proxy.scheme = \"http\"\n            mock_proxy.hostname = \"proxy.example.com\"\n            mock_proxy.port = 8080\n            mock_proxy.username = None\n            mock_proxy.password = None\n            mock_parse_proxy.return_value = mock_proxy\n            mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n    \n            result = await Connection.jarm_connect(target, connect_args, data, check)\n    \n            assert result == (\"test_check\", b\"mock_response\")\n            mock_parse_proxy.assert_called_once_with(\"http://proxy.example.com:8080\")\n&gt;           mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('proxy.example.com', 8080, &lt;AddressFamily.AF_INET: 2&gt;)\nE           \nE           pytest introspection follows:\nE           \nE           Args:\nE           assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE             \nE             At index 0 diff: 'proxy.example.com' != ('example.com', 443)\nE             Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:142: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_hostname\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_scheme\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_timeout\" time=\"0.001\"><failure message=\"AssertionError: expected call not found.&#10;Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)&#10;  Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)&#10;  &#10;  At index 0 diff: 'example.com' != ('example.com', 443)&#10;  Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;&#10;  Use -v to get more diff\">self = &lt;MagicMock name='validate_target' id='4376847296'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\nexpected = call(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nactual = call('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104e8a200&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;MagicMock name='validate_target' id='4376847296'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE         Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE       \nE       pytest introspection follows:\nE       \nE       Args:\nE       assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE         \nE         At index 0 diff: 'example.com' != ('example.com', 443)\nE         Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_jarm_connect_timeout():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 1,\n            \"verify\": True\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n            mock_jarm_data.side_effect = asyncio.TimeoutError()\n            mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n    \n            result = await Connection.jarm_connect(target, connect_args, data, check)\n    \n            assert result == (\"test_check\", b\"\")\n&gt;           mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE           \nE           pytest introspection follows:\nE           \nE           Args:\nE           assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE             \nE             At index 0 diff: 'example.com' != ('example.com', 443)\nE             Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:212: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_address_family\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_address_family\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_timeout\" time=\"0.001\"><failure message=\"AssertionError: expected call not found.&#10;Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)&#10;  Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)&#10;  &#10;  At index 0 diff: 'example.com' != ('example.com', 443)&#10;  Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;&#10;  Use -v to get more diff\">self = &lt;MagicMock name='validate_target' id='4376845616'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\nexpected = call(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nactual = call('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104e8ad40&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;MagicMock name='validate_target' id='4376845616'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE         Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE       \nE       pytest introspection follows:\nE       \nE       Args:\nE       assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE         \nE         At index 0 diff: 'example.com' != ('example.com', 443)\nE         Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_jarm_connect_invalid_timeout():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": \"invalid\",  # Invalid timeout\n            \"verify\": True\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target:\n            mock_jarm_data.return_value = b\"mock_response\"\n            mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n    \n            result = await Connection.jarm_connect(target, connect_args, data, check)\n    \n            assert result == (\"test_check\", b\"mock_response\")\n&gt;           mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('example.com', 443, &lt;AddressFamily.AF_INET: 2&gt;)\nE           \nE           pytest introspection follows:\nE           \nE           Args:\nE           assert ('example.com...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE             \nE             At index 0 diff: 'example.com' != ('example.com', 443)\nE             Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:253: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_type\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_proxy_auth_type\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_invalid_verify_type\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_connection\" name=\"test_jarm_connect_https_proxy\" time=\"0.002\"><failure message=\"AssertionError: expected call not found.&#10;Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)&#10;  Actual: validate_target('proxy.example.com', 8443, &lt;AddressFamily.AF_INET: 2&gt;)&#10;&#10;pytest introspection follows:&#10;&#10;Args:&#10;assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)&#10;  &#10;  At index 0 diff: 'proxy.example.com' != ('example.com', 443)&#10;  Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;&#10;  Use -v to get more diff\">self = &lt;MagicMock name='validate_target' id='4376424672'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\nexpected = call(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nactual = call('proxy.example.com', 8443, &lt;AddressFamily.AF_INET: 2&gt;)\n_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x104e8b060&gt;\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n&gt;           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('proxy.example.com', 8443, &lt;AddressFamily.AF_INET: 2&gt;)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:977: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = &lt;MagicMock name='validate_target' id='4376424672'&gt;\nargs = (('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;), kwargs = {}\n\n    def assert_called_once_with(self, /, *args, **kwargs):\n        \"\"\"assert that the mock was called exactly once and that that call was\n        with the specified arguments.\"\"\"\n        if not self.call_count == 1:\n            msg = (\"Expected '%s' to be called once. Called %s times.%s\"\n                   % (self._mock_name or 'mock',\n                      self.call_count,\n                      self._calls_repr()))\n            raise AssertionError(msg)\n&gt;       return self.assert_called_with(*args, **kwargs)\nE       AssertionError: expected call not found.\nE       Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE         Actual: validate_target('proxy.example.com', 8443, &lt;AddressFamily.AF_INET: 2&gt;)\nE       \nE       pytest introspection follows:\nE       \nE       Args:\nE       assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE         \nE         At index 0 diff: 'proxy.example.com' != ('example.com', 443)\nE         Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE         Use -v to get more diff\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:989: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\n    @pytest.mark.asyncio\n    async def test_jarm_connect_https_proxy():\n        target = (\"example.com\", 443)\n        connect_args = {\n            \"address_family\": Connection.AddressFamily.AF_INET,\n            \"timeout\": 30,\n            \"verify\": False,\n            \"proxy\": \"https://proxy.example.com:8443\"\n        }\n        data = b\"test_data\"\n        check = \"test_check\"\n    \n        with patch('jarm.connection.connection.Connection.jarm_data', new_callable=AsyncMock) as mock_jarm_data, \\\n             patch('jarm.proxy.proxy.Proxy.parse_proxy') as mock_parse_proxy, \\\n             patch('jarm.validate.validate.Validate.validate_target') as mock_validate_target, \\\n             patch('ssl.create_default_context') as mock_create_default_context:\n            mock_jarm_data.return_value = b\"mock_response\"\n            mock_proxy = MagicMock()\n            mock_proxy.scheme = \"https\"\n            mock_proxy.hostname = \"proxy.example.com\"\n            mock_proxy.port = 8443\n            mock_proxy.username = None\n            mock_proxy.password = None\n            mock_parse_proxy.return_value = mock_proxy\n            mock_validate_target.return_value = (2, None, None, None, (\"192.0.2.1\", 443))\n            mock_ssl_context = MagicMock()\n            mock_create_default_context.return_value = mock_ssl_context\n    \n            result = await Connection.jarm_connect(target, connect_args, data, check)\n    \n            assert result == (\"test_check\", b\"mock_response\")\n            mock_parse_proxy.assert_called_once_with(\"https://proxy.example.com:8443\")\n&gt;           mock_validate_target.assert_called_once_with(target, Connection.AddressFamily.AF_INET)\nE           AssertionError: expected call not found.\nE           Expected: validate_target(('example.com', 443), &lt;AddressFamily.AF_INET: 2&gt;)\nE             Actual: validate_target('proxy.example.com', 8443, &lt;AddressFamily.AF_INET: 2&gt;)\nE           \nE           pytest introspection follows:\nE           \nE           Args:\nE           assert ('proxy.examp...y.AF_INET: 2&gt;) == (('example.co...y.AF_INET: 2&gt;)\nE             \nE             At index 0 diff: 'proxy.example.com' != ('example.com', 443)\nE             Left contains one more item: &lt;AddressFamily.AF_INET: 2&gt;\nE             Use -v to get more diff\n\njarm/connection/baserock_generated_tests/baserock_test_connection.py:335: AssertionError</failure></testcase></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 99.0,
            "missing_lines": []
        }
    }
]