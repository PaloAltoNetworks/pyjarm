[
    {
        "timestamp": "2025-02-04T10-41-47.920063",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/proxy/proxy.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/proxy/baserock_generated_tests/baserock_test_proxy.py",
        "test_code": "import pytest\nfrom unittest.mock import patch, MagicMock\nfrom urllib.parse import urlparse\nfrom base64 import b64encode\nfrom jarm.exceptions.exceptions import PyJARMProxyError\nfrom jarm.proxy.proxy import Proxy\n\n@pytest.fixture\ndef mock_reader():\n    return MagicMock(spec=asyncio.StreamReader)\n\n@pytest.fixture\ndef mock_writer():\n    return MagicMock(spec=asyncio.StreamWriter)\n\nclass TestProxy:\n    def test_get_http_headers(self):\n        assert Proxy.get_http_headers() == {}\n\n    @pytest.mark.parametrize(\"input_proxy,expected_result\", [\n        (None, urlparse(\"https://proxy.example.com\")),\n        (\"ignore\", None),\n        (\"http://custom.proxy.com\", urlparse(\"http://custom.proxy.com\")),\n    ])\n    def test_parse_proxy(self, input_proxy, expected_result):\n        with patch('jarm.proxy.proxy.getproxies') as mock_getproxies:\n            mock_getproxies.return_value = {\"https\": \"https://proxy.example.com\"}\n            result = Proxy.parse_proxy(input_proxy)\n            assert result == expected_result\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_success(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 OK\\r\\n\",\n            b\"Header: Value\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        \n        await Proxy.handle_proxy(\n            mock_reader,\n            mock_writer,\n            \"example.com:443\",\n            auth=\"Bearer token123\"\n        )\n        \n        expected_buf = (\n            \"CONNECT example.com:443 HTTP/1.1\\r\\n\"\n            \"Proxy-Authorization: Bearer token123\\r\\n\"\n            \"Host: example.com:443\\r\\n\\r\\n\"\n        )\n        mock_writer.write.assert_called_once_with(expected_buf.encode())\n        mock_writer.drain.assert_called_once()\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_with_username_password(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 OK\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        \n        await Proxy.handle_proxy(\n            mock_reader,\n            mock_writer,\n            \"example.com:443\",\n            username=\"user\",\n            password=\"pass\"\n        )\n        \n        expected_auth = f\"Basic {b64encode(b'user:pass').decode()}\"\n        expected_buf = (\n            \"CONNECT example.com:443 HTTP/1.1\\r\\n\"\n            f\"Proxy-Authorization: {expected_auth}\\r\\n\"\n            \"Host: example.com:443\\r\\n\\r\\n\"\n        )\n        mock_writer.write.assert_called_once_with(expected_buf.encode())\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_no_status(self, mock_reader, mock_writer):\n        mock_reader.readline.return_value = b\"\"\n        \n        with pytest.raises(PyJARMProxyError, match=\"No status line received from Proxy\"):\n            await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\"status_line,error_message\", [\n        (b\"HTTP/1.0 200 OK\\r\\n\", \"Invalid Proxy Response: b'HTTP/1.0 200 OK\\\\r\\\\n'\"),\n        (b\"HTTP/1.1 403 Forbidden\\r\\n\", \"Invalid Proxy Response: b'HTTP/1.1 403 Forbidden\\\\r\\\\n'\"),\n        (b\"Invalid Response\\r\\n\", \"Invalid Proxy Response: b'Invalid Response\\\\r\\\\n'\"),\n    ])\n    async def test_handle_proxy_invalid_response(self, mock_reader, mock_writer, status_line, error_message):\n        mock_reader.readline.side_effect = [status_line, b\"\\r\\n\"]\n        \n        with pytest.raises(PyJARMProxyError, match=error_message):\n            await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_custom_headers(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 OK\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        \n        custom_headers = {\"User-Agent\": \"CustomAgent/1.0\"}\n        await Proxy.handle_proxy(\n            mock_reader,\n            mock_writer,\n            \"example.com:443\",\n            headers=custom_headers\n        )\n        \n        expected_buf = (\n            \"CONNECT example.com:443 HTTP/1.1\\r\\n\"\n            \"User-Agent: CustomAgent/1.0\\r\\n\"\n            \"Host: example.com:443\\r\\n\\r\\n\"\n        )\n        mock_writer.write.assert_called_once_with(expected_buf.encode())",
        "test_results": {
            "passed": 4,
            "failed": 0,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"7\" failures=\"0\" skipped=\"0\" tests=\"11\" time=\"0.077\" timestamp=\"2025-02-04T10:41:46.947985+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_get_http_headers\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_parse_proxy[None-expected_result0]\" time=\"0.002\" /><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_parse_proxy[ignore-None]\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_parse_proxy[http://custom.proxy.com-expected_result2]\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_success\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_with_username_password\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_no_status\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_invalid_response[HTTP/1.0 200 OK\\r\\n-Invalid Proxy Response: b'HTTP/1.0 200 OK\\\\r\\\\n']\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_invalid_response[HTTP/1.1 403 Forbidden\\r\\n-Invalid Proxy Response: b'HTTP/1.1 403 Forbidden\\\\r\\\\n']\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_invalid_response[Invalid Response\\r\\n-Invalid Proxy Response: b'Invalid Response\\\\r\\\\n']\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase><testcase classname=\"baserock_generated_tests.baserock_test_proxy.TestProxy\" name=\"test_handle_proxy_custom_headers\" time=\"0.000\"><error message=\"failed on setup with &quot;NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?&quot;\">@pytest.fixture\n    def mock_reader():\n&gt;       return MagicMock(spec=asyncio.StreamReader)\nE       NameError: name 'asyncio' is not defined. Did you forget to import 'asyncio'?\n\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:10: NameError</error></testcase></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 47.0,
            "missing_lines": []
        }
    },
    {
        "timestamp": "2025-02-04T10-42-36.523165",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/proxy/proxy.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/proxy/baserock_generated_tests/baserock_test_proxy.py",
        "test_code": "import pytest\nfrom unittest.mock import MagicMock, patch\nfrom urllib.request import getproxies\nfrom urllib.parse import urlparse\nfrom base64 import b64encode\nimport asyncio\n\nfrom jarm.proxy.prox import Proxy\nfrom jarm.exceptions.exceptions import PyJARMProxyError\n\n@pytest.fixture\ndef mock_reader():\n    return MagicMock(spec=asyncio.StreamReader)\n\n@pytest.fixture\ndef mock_writer():\n    return MagicMock(spec=asyncio.StreamWriter)\n\nclass TestProxy:\n    def test_get_http_headers(self):\n        headers = Proxy.get_http_headers()\n        assert isinstance(headers, dict)\n        assert len(headers) == 0\n\n    @pytest.mark.parametrize(\"proxy_input, expected_output\", [\n        (None, None),\n        (\"ignore\", None),\n        (\"http://example.com:8080\", urlparse(\"http://example.com:8080\")),\n    ])\n    def test_parse_proxy(self, proxy_input, expected_output):\n        with patch('jarm.proxy.prox.getproxies') as mock_getproxies:\n            mock_getproxies.return_value = {\"https\": \"http://default.proxy:8080\"}\n            result = Proxy.parse_proxy(proxy_input)\n            assert result == expected_output\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_success(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 Connection established\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n        mock_writer.write.assert_called_once()\n        mock_writer.drain.assert_called_once()\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_with_username_password(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 Connection established\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\", username=\"user\", password=\"pass\")\n        call_args = mock_writer.write.call_args[0][0]\n        assert b\"Proxy-Authorization: Basic \" in call_args\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_no_status(self, mock_reader, mock_writer):\n        mock_reader.readline.return_value = b\"\"\n        with pytest.raises(PyJARMProxyError, match=\"No status line received from Proxy\"):\n            await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n\n    @pytest.mark.asyncio\n    @pytest.mark.parametrize(\"status_line, error_message\", [\n        (b\"HTTP/1.0 200 OK\\r\\n\", \"Invalid Proxy Response: b'HTTP/1.0 200 OK\\\\r\\\\n'\"),\n        (b\"HTTP/1.1 403 Forbidden\\r\\n\", \"Invalid Proxy Response: b'HTTP/1.1 403 Forbidden\\\\r\\\\n'\"),\n        (b\"Invalid Response\\r\\n\", \"Invalid Proxy Response: b'Invalid Response\\\\r\\\\n'\"),\n    ])\n    async def test_handle_proxy_invalid_response(self, mock_reader, mock_writer, status_line, error_message):\n        mock_reader.readline.side_effect = [status_line, b\"\\r\\n\"]\n        with pytest.raises(PyJARMProxyError, match=error_message):\n            await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_custom_headers(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 Connection established\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        custom_headers = {\"User-Agent\": \"CustomAgent\", \"X-Custom-Header\": \"Value\"}\n        with patch.object(Proxy, 'get_http_headers', return_value=custom_headers):\n            await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n        call_args = mock_writer.write.call_args[0][0].decode()\n        assert \"User-Agent: CustomAgent\" in call_args\n        assert \"X-Custom-Header: Value\" in call_args\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_with_auth(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 Connection established\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        auth = \"Bearer token123\"\n        await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\", auth=auth)\n        call_args = mock_writer.write.call_args[0][0].decode()\n        assert f\"Proxy-Authorization: {auth}\" in call_args\n\n    @pytest.mark.asyncio\n    async def test_handle_proxy_multiple_header_lines(self, mock_reader, mock_writer):\n        mock_reader.readline.side_effect = [\n            b\"HTTP/1.1 200 Connection established\\r\\n\",\n            b\"Header1: Value1\\r\\n\",\n            b\"Header2: Value2\\r\\n\",\n            b\"\\r\\n\"\n        ]\n        await Proxy.handle_proxy(mock_reader, mock_writer, \"example.com:443\")\n        assert mock_reader.readline.call_count == 4\n",
        "test_results": {
            "passed": 0,
            "failed": 0,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"1\" failures=\"0\" skipped=\"0\" tests=\"1\" time=\"0.070\" timestamp=\"2025-02-04T10:42:36.435252+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"\" name=\"baserock_generated_tests.baserock_test_proxy\" time=\"0.000\"><error message=\"collection failure\">ImportError while importing test module '/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/proxy/baserock_generated_tests/baserock_test_proxy.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/importlib/__init__.py:88: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\njarm/proxy/baserock_generated_tests/baserock_test_proxy.py:8: in &lt;module&gt;\n    from jarm.proxy.prox import Proxy\nE   ModuleNotFoundError: No module named 'jarm.proxy.prox'</error></testcase></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 0.0,
            "missing_lines": []
        }
    }
]