[
    {
        "timestamp": "2025-02-05T18-06-57.264202",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/ciphers/ciphers.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/ciphers/baserock_generated_tests/baserock_test_ciphers.py",
        "test_code": "import pytest\nfrom collections import namedtuple\nfrom typing import List\n\nfrom jarm.constants import ALL, NO_1_3\nfrom jarm.ciphers.ciphers import CipherSet, ALL_LIST, NO_1_3_LIST, CIPHERS\n\ndef test_cipherset_namedtuple():\n    assert CipherSet._fields == ('name', 'values')\n    cs = CipherSet('test', [b'\\x00\\x01'])\n    assert cs.name == 'test'\n    assert cs.values == [b'\\x00\\x01']\n\ndef test_all_list_content():\n    assert isinstance(ALL_LIST, List)\n    assert all(isinstance(item, bytes) for item in ALL_LIST)\n    assert len(ALL_LIST) == 74\n    assert b'\\x00\\x16' in ALL_LIST\n    assert b'\\x00\\x05' in ALL_LIST\n\ndef test_no_1_3_list_content():\n    assert isinstance(NO_1_3_LIST, List)\n    assert all(isinstance(item, bytes) for item in NO_1_3_LIST)\n    assert len(NO_1_3_LIST) == 69\n    assert b'\\x00\\x16' in NO_1_3_LIST\n    assert b'\\x00\\x05' in NO_1_3_LIST\n\ndef test_all_list_no_1_3_list_differences():\n    all_set = set(ALL_LIST)\n    no_1_3_set = set(NO_1_3_LIST)\n    difference = all_set - no_1_3_set\n    assert difference == {b'\\x13\\x02', b'\\x13\\x01', b'\\x13\\x05', b'\\x13\\x04', b'\\x13\\x03'}\n\ndef test_ciphers_dictionary():\n    assert isinstance(CIPHERS, dict)\n    assert len(CIPHERS) == 2\n    assert ALL in CIPHERS\n    assert NO_1_3 in CIPHERS\n\ndef test_ciphers_all():\n    assert CIPHERS[ALL].name == ALL\n    assert CIPHERS[ALL].values == ALL_LIST\n\ndef test_ciphers_no_1_3():\n    assert CIPHERS[NO_1_3].name == NO_1_3\n    assert CIPHERS[NO_1_3].values == NO_1_3_LIST\n\ndef test_cipherset_immutability():\n    with pytest.raises(AttributeError):\n        CIPHERS[ALL].name = \"New Name\"\n    \n    with pytest.raises(AttributeError):\n        CIPHERS[ALL].values.append(b'\\x00\\x00')\n\ndef test_all_list_no_duplicates():\n    assert len(ALL_LIST) == len(set(ALL_LIST))\n\ndef test_no_1_3_list_no_duplicates():\n    assert len(NO_1_3_LIST) == len(set(NO_1_3_LIST))\n\ndef test_ciphers_keys_match_constants():\n    assert set(CIPHERS.keys()) == {ALL, NO_1_3}\n\ndef test_cipherset_representation():\n    cs = CipherSet('test', [b'\\x00\\x01'])\n    assert repr(cs) == \"CipherSet(name='test', values=[b'\\\\x00\\\\x01'])\"\n    assert str(cs) == \"CipherSet(name='test', values=[b'\\\\x00\\\\x01'])\"\n\ndef test_all_list_order():\n    assert ALL_LIST[0] == b'\\x00\\x16'\n    assert ALL_LIST[-1] == b'\\x00\\x05'\n\ndef test_no_1_3_list_order():\n    assert NO_1_3_LIST[0] == b'\\x00\\x16'\n    assert NO_1_3_LIST[-1] == b'\\x00\\x05'\n\ndef test_ciphers_values_type():\n    for cipher_set in CIPHERS.values():\n        assert isinstance(cipher_set, CipherSet)\n        assert isinstance(cipher_set.name, str)\n        assert isinstance(cipher_set.values, List)\n        assert all(isinstance(value, bytes) for value in cipher_set.values)\n",
        "test_results": {
            "passed": 11,
            "failed": 4,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"0\" failures=\"4\" skipped=\"0\" tests=\"15\" time=\"0.060\" timestamp=\"2025-02-05T18:06:56.311549+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_cipherset_namedtuple\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_all_list_content\" time=\"0.001\"><failure message=\"AssertionError: assert 69 == 74&#10; +  where 69 = len([b'\\x00\\x16', b'\\x003', b'\\x00g', b'\\xc0\\x9e', b'\\xc0\\xa2', b'\\x00\\x9e', ...])\">def test_all_list_content():\n        assert isinstance(ALL_LIST, List)\n        assert all(isinstance(item, bytes) for item in ALL_LIST)\n&gt;       assert len(ALL_LIST) == 74\nE       AssertionError: assert 69 == 74\nE        +  where 69 = len([b'\\x00\\x16', b'\\x003', b'\\x00g', b'\\xc0\\x9e', b'\\xc0\\xa2', b'\\x00\\x9e', ...])\n\njarm/ciphers/baserock_generated_tests/baserock_test_ciphers.py:17: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_no_1_3_list_content\" time=\"0.000\"><failure message=\"AssertionError: assert 64 == 69&#10; +  where 64 = len([b'\\x00\\x16', b'\\x003', b'\\x00g', b'\\xc0\\x9e', b'\\xc0\\xa2', b'\\x00\\x9e', ...])\">def test_no_1_3_list_content():\n        assert isinstance(NO_1_3_LIST, List)\n        assert all(isinstance(item, bytes) for item in NO_1_3_LIST)\n&gt;       assert len(NO_1_3_LIST) == 69\nE       AssertionError: assert 64 == 69\nE        +  where 64 = len([b'\\x00\\x16', b'\\x003', b'\\x00g', b'\\xc0\\x9e', b'\\xc0\\xa2', b'\\x00\\x9e', ...])\n\njarm/ciphers/baserock_generated_tests/baserock_test_ciphers.py:24: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_all_list_no_1_3_list_differences\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_ciphers_dictionary\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_ciphers_all\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_ciphers_no_1_3\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_cipherset_immutability\" time=\"0.000\"><failure message=\"Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;\">def test_cipherset_immutability():\n        with pytest.raises(AttributeError):\n            CIPHERS[ALL].name = \"New Name\"\n    \n&gt;       with pytest.raises(AttributeError):\nE       Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;\n\njarm/ciphers/baserock_generated_tests/baserock_test_ciphers.py:52: Failed</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_all_list_no_duplicates\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_no_1_3_list_no_duplicates\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_ciphers_keys_match_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_cipherset_representation\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_all_list_order\" time=\"0.000\"><failure message=\"AssertionError: assert b'\\x00\\x00' == b'\\x00\\x05'&#10;  &#10;  At index 1 diff: b'\\x00' != b'\\x05'&#10;  Use -v to get more diff\">def test_all_list_order():\n        assert ALL_LIST[0] == b'\\x00\\x16'\n&gt;       assert ALL_LIST[-1] == b'\\x00\\x05'\nE       AssertionError: assert b'\\x00\\x00' == b'\\x00\\x05'\nE         \nE         At index 1 diff: b'\\x00' != b'\\x05'\nE         Use -v to get more diff\n\njarm/ciphers/baserock_generated_tests/baserock_test_ciphers.py:71: AssertionError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_no_1_3_list_order\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_ciphers\" name=\"test_ciphers_values_type\" time=\"0.000\" /></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 100.0,
            "missing_lines": []
        }
    }
]