[
    {
        "timestamp": "2025-02-04T10-06-39.342053",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/cli.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/baserock_generated_tests/baserock_test_cli.py",
        "test_code": "import pytest\nfrom unittest.mock import patch, MagicMock\nfrom argparse import Namespace\nimport asyncio\nfrom datetime import datetime, timezone\nfrom io import StringIO\nimport sys\n\n# Assuming the module is named jarm_cli.py\nfrom jarm.cli import _scan, run\n\n@pytest.fixture\ndef mock_scanner():\n    with patch('jarm.cli.Scanner') as mock:\n        yield mock\n\n@pytest.fixture\ndef mock_asyncio_run():\n    with patch('asyncio.run') as mock:\n        yield mock\n\n@pytest.fixture\ndef mock_open():\n    with patch('builtins.open', new_callable=MagicMock) as mock:\n        yield mock\n\ndef test_scan_with_port(mock_scanner, mock_asyncio_run):\n    mock_asyncio_run.return_value = ['test_jarm', 'test_host', 'test_port']\n    result = _scan('example.com:8443')\n    \n    assert result == ['test_jarm', 'test_host', 'test_port']\n    mock_scanner.scan_async.assert_called_once_with(\n        dest_host='example.com',\n        dest_port=8443,\n        timeout=20,\n        address_family=0,\n        proxy=None,\n        proxy_auth=None,\n        proxy_insecure=None,\n        concurrency=2,\n        suppress=False\n    )\n\ndef test_scan_without_port(mock_scanner, mock_asyncio_run):\n    mock_asyncio_run.return_value = ['test_jarm', 'test_host', '443']\n    result = _scan('example.com')\n    \n    assert result == ['test_jarm', 'test_host', '443']\n    mock_scanner.scan_async.assert_called_once_with(\n        dest_host='example.com',\n        dest_port=443,\n        timeout=20,\n        address_family=0,\n        proxy=None,\n        proxy_auth=None,\n        proxy_insecure=None,\n        concurrency=2,\n        suppress=False\n    )\n\n@pytest.mark.parametrize(\"args, expected_calls\", [\n    (\n        Namespace(scan='example.com', input=None, debug=False, output=None, ipv4only=False, ipv6only=False, \n                  concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False),\n        [('example.com', 0, None, None, None, 2, None, False)]\n    ),\n    (\n        Namespace(scan=None, input='input.txt', debug=True, output='output.csv', ipv4only=True, ipv6only=False, \n                  concurrency=5, proxy='http://proxy.com', proxy_auth='auth', proxy_insecure=True, timeout=30, suppress=True),\n        [('target1', 1, 'http://proxy.com', 'auth', True, 5, 30, True),\n         ('target2', 1, 'http://proxy.com', 'auth', True, 5, 30, True)]\n    )\n])\ndef test_run(args, expected_calls, mock_open, monkeypatch):\n    mock_scan = MagicMock(return_value=['test_jarm', 'test_host', 'test_port'])\n    monkeypatch.setattr('jarm.cli._scan', mock_scan)\n    \n    if args.input:\n        mock_file = mock_open.return_value.__enter__.return_value\n        mock_file.read.return_value = \"target1\\ntarget2\"\n    \n    with patch('argparse.ArgumentParser.parse_args', return_value=args):\n        with patch('sys.stdout', new=StringIO()) as fake_out:\n            run()\n    \n    assert mock_scan.call_count == len(expected_calls)\n    mock_scan.assert_has_calls([pytest.call(*call) for call in expected_calls])\n    \n    if args.output:\n        mock_open.assert_called_with('output.csv', 'w')\n        write_mock = mock_open.return_value.__enter__.return_value.write\n        assert write_mock.call_count == 3  # Header + 2 result lines\n        assert 'Host,Port,JARM,ScanTime' in write_mock.call_args_list[0][0][0]\n\ndef test_run_no_args():\n    with pytest.raises(SystemExit):\n        with patch('sys.argv', ['jarm_cli.py']):\n            run()\n\n@pytest.mark.parametrize(\"argv, error_msg\", [\n    (['jarm_cli.py', '--ipv4only', '--ipv6only'], \"Cannot specify both --ipv4only and --ipv6only at the same time\"),\n])\ndef test_run_invalid_args(argv, error_msg):\n    with pytest.raises(SystemExit):\n        with patch('sys.argv', argv), patch('sys.stderr', new=StringIO()) as fake_err:\n            run()\n    assert error_msg in fake_err.getvalue()\n\ndef test_run_with_debug(monkeypatch):\n    args = Namespace(scan='example.com', input=None, debug=True, output=None, ipv4only=False, ipv6only=False, \n                     concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False)\n    mock_logging = MagicMock()\n    monkeypatch.setattr('jarm.cli.logging', mock_logging)\n    monkeypatch.setattr('argparse.ArgumentParser.parse_args', lambda x: args)\n    monkeypatch.setattr('jarm.cli._scan', MagicMock(return_value=['test_jarm', 'test_host', 'test_port']))\n    \n    run()\n    \n    mock_logging.basicConfig.assert_called_once_with(level=logging.DEBUG)\n\n",
        "test_results": {
            "passed": 4,
            "failed": 3,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"0\" failures=\"3\" skipped=\"0\" tests=\"7\" time=\"0.089\" timestamp=\"2025-02-04T10:06:38.300125+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_scan_with_port\" time=\"0.003\" /><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_scan_without_port\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_run[args0-expected_calls0]\" time=\"0.001\"><failure message=\"AttributeError: module 'pytest' has no attribute 'call'\">args = Namespace(scan='example.com', input=None, debug=False, output=None, ipv4only=False, ipv6only=False, concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False)\nexpected_calls = [('example.com', 0, None, None, None, 2, ...)]\nmock_open = &lt;MagicMock name='open' id='4380767104'&gt;\nmonkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x10517fce0&gt;\n\n    @pytest.mark.parametrize(\"args, expected_calls\", [\n        (\n            Namespace(scan='example.com', input=None, debug=False, output=None, ipv4only=False, ipv6only=False,\n                      concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False),\n            [('example.com', 0, None, None, None, 2, None, False)]\n        ),\n        (\n            Namespace(scan=None, input='input.txt', debug=True, output='output.csv', ipv4only=True, ipv6only=False,\n                      concurrency=5, proxy='http://proxy.com', proxy_auth='auth', proxy_insecure=True, timeout=30, suppress=True),\n            [('target1', 1, 'http://proxy.com', 'auth', True, 5, 30, True),\n             ('target2', 1, 'http://proxy.com', 'auth', True, 5, 30, True)]\n        )\n    ])\n    def test_run(args, expected_calls, mock_open, monkeypatch):\n        mock_scan = MagicMock(return_value=['test_jarm', 'test_host', 'test_port'])\n        monkeypatch.setattr('jarm.cli._scan', mock_scan)\n    \n        if args.input:\n            mock_file = mock_open.return_value.__enter__.return_value\n            mock_file.read.return_value = \"target1\\ntarget2\"\n    \n        with patch('argparse.ArgumentParser.parse_args', return_value=args):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                run()\n    \n        assert mock_scan.call_count == len(expected_calls)\n&gt;       mock_scan.assert_has_calls([pytest.call(*call) for call in expected_calls])\nE       AttributeError: module 'pytest' has no attribute 'call'\n\njarm/baserock_generated_tests/baserock_test_cli.py:87: AttributeError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_run[args1-expected_calls1]\" time=\"0.002\"><failure message=\"AttributeError: module 'pytest' has no attribute 'call'\">args = Namespace(scan=None, input='input.txt', debug=True, output='output.csv', ipv4only=True, ipv6only=False, concurrency=5, proxy='http://proxy.com', proxy_auth='auth', proxy_insecure=True, timeout=30, suppress=True)\nexpected_calls = [('target1', 1, 'http://proxy.com', 'auth', True, 5, ...), ('target2', 1, 'http://proxy.com', 'auth', True, 5, ...)]\nmock_open = &lt;MagicMock name='open' id='4381575216'&gt;\nmonkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x105280510&gt;\n\n    @pytest.mark.parametrize(\"args, expected_calls\", [\n        (\n            Namespace(scan='example.com', input=None, debug=False, output=None, ipv4only=False, ipv6only=False,\n                      concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False),\n            [('example.com', 0, None, None, None, 2, None, False)]\n        ),\n        (\n            Namespace(scan=None, input='input.txt', debug=True, output='output.csv', ipv4only=True, ipv6only=False,\n                      concurrency=5, proxy='http://proxy.com', proxy_auth='auth', proxy_insecure=True, timeout=30, suppress=True),\n            [('target1', 1, 'http://proxy.com', 'auth', True, 5, 30, True),\n             ('target2', 1, 'http://proxy.com', 'auth', True, 5, 30, True)]\n        )\n    ])\n    def test_run(args, expected_calls, mock_open, monkeypatch):\n        mock_scan = MagicMock(return_value=['test_jarm', 'test_host', 'test_port'])\n        monkeypatch.setattr('jarm.cli._scan', mock_scan)\n    \n        if args.input:\n            mock_file = mock_open.return_value.__enter__.return_value\n            mock_file.read.return_value = \"target1\\ntarget2\"\n    \n        with patch('argparse.ArgumentParser.parse_args', return_value=args):\n            with patch('sys.stdout', new=StringIO()) as fake_out:\n                run()\n    \n        assert mock_scan.call_count == len(expected_calls)\n&gt;       mock_scan.assert_has_calls([pytest.call(*call) for call in expected_calls])\nE       AttributeError: module 'pytest' has no attribute 'call'\n\njarm/baserock_generated_tests/baserock_test_cli.py:87: AttributeError</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_run_no_args\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_run_invalid_args[argv0-Cannot specify both --ipv4only and --ipv6only at the same time]\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_cli\" name=\"test_run_with_debug\" time=\"0.001\"><failure message=\"NameError: name 'logging' is not defined. Did you forget to import 'logging'?\">monkeypatch = &lt;_pytest.monkeypatch.MonkeyPatch object at 0x105288170&gt;\n\n    def test_run_with_debug(monkeypatch):\n        args = Namespace(scan='example.com', input=None, debug=True, output=None, ipv4only=False, ipv6only=False,\n                         concurrency=None, proxy=None, proxy_auth=None, proxy_insecure=None, timeout=None, suppress=False)\n        mock_logging = MagicMock()\n        monkeypatch.setattr('jarm.cli.logging', mock_logging)\n        monkeypatch.setattr('argparse.ArgumentParser.parse_args', lambda x: args)\n        monkeypatch.setattr('jarm.cli._scan', MagicMock(return_value=['test_jarm', 'test_host', 'test_port']))\n    \n        run()\n    \n&gt;       mock_logging.basicConfig.assert_called_once_with(level=logging.DEBUG)\nE       NameError: name 'logging' is not defined. Did you forget to import 'logging'?\n\njarm/baserock_generated_tests/baserock_test_cli.py:119: NameError</failure></testcase></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 89.0,
            "missing_lines": []
        }
    }
]