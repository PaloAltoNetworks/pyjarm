[
    {
        "timestamp": "2025-02-04T10-08-18.078394",
        "source_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/constants.py",
        "test_file": "/Users/guptatilak/Sapient/vscode/projects/palo_alto/tmp/pyjarm/jarm/baserock_generated_tests/baserock_test_constants.py",
        "test_code": "import pytest\nfrom typing import Set\nfrom jarm.constants import (\n    SSL_V3, TLS_1, TLS_1_1, TLS_1_2, TLS_1_3, ALLOWED_TLS_VERSIONS,\n    ALL, NO_1_3, ALLOWED_CIPHER_LISTS,\n    GREASE, NO_GREASE, ALPN, RARE_ALPN,\n    SUPPORT_1_2, SUPPORT_1_3, NO_SUPPORT, ALLOWED_SUPPORT,\n    FORWARD, REVERSE, ALLOWED_EXTENSION_ORDER,\n    TOP_HALF, BOTTOM_HALF, MIDDLE_OUT, ALLOWED_CIPHER_ORDER,\n    TOTAL_FAILURE, FAILED_PACKET,\n    ERROR_INC_1, ERROR_INC_2,\n    DEFAULT_TIMEOUT\n)\n\nclass TestConstants:\n\n    def test_tls_version_constants(self):\n        assert SSL_V3 == \"SSLv3\"\n        assert TLS_1 == \"TLS_1\"\n        assert TLS_1_1 == \"TLS_1.1\"\n        assert TLS_1_2 == \"TLS_1.2\"\n        assert TLS_1_3 == \"TLS_1.3\"\n\n    def test_allowed_tls_versions(self):\n        expected_versions = {\"SSLv3\", \"TLS_1\", \"TLS_1.1\", \"TLS_1.2\", \"TLS_1.3\"}\n        assert ALLOWED_TLS_VERSIONS == expected_versions\n        assert isinstance(ALLOWED_TLS_VERSIONS, Set)\n\n    def test_cipher_list_constants(self):\n        assert ALL == \"ALL\"\n        assert NO_1_3 == \"NO1.3\"\n\n    def test_allowed_cipher_lists(self):\n        expected_lists = {\"ALL\", \"NO1.3\"}\n        assert ALLOWED_CIPHER_LISTS == expected_lists\n        assert isinstance(ALLOWED_CIPHER_LISTS, Set)\n\n    def test_grease_constants(self):\n        assert GREASE == \"GREASE\"\n        assert NO_GREASE == \"NO_GREASE\"\n\n    def test_alpn_constants(self):\n        assert ALPN == \"ALPN\"\n        assert RARE_ALPN == \"RARE_ALPN\"\n\n    def test_support_constants(self):\n        assert SUPPORT_1_2 == \"1.2_SUPPPORT\"\n        assert SUPPORT_1_3 == \"1.3_SUPPORT\"\n        assert NO_SUPPORT == \"NO_SUPPORT\"\n\n    def test_allowed_support(self):\n        expected_support = {\"1.2_SUPPPORT\", \"1.3_SUPPORT\", \"NO_SUPPORT\"}\n        assert ALLOWED_SUPPORT == expected_support\n        assert isinstance(ALLOWED_SUPPORT, Set)\n\n    def test_extension_order_constants(self):\n        assert FORWARD == \"FORWARD\"\n        assert REVERSE == \"REVERSE\"\n\n    def test_allowed_extension_order(self):\n        expected_order = {\"FORWARD\", \"REVERSE\"}\n        assert ALLOWED_EXTENSION_ORDER == expected_order\n        assert isinstance(ALLOWED_EXTENSION_ORDER, Set)\n\n    def test_cipher_order_constants(self):\n        assert TOP_HALF == \"TOP_HALF\"\n        assert BOTTOM_HALF == \"BOTTOM_HALF\"\n        assert MIDDLE_OUT == \"MIDDLE_OUT\"\n\n    def test_allowed_cipher_order(self):\n        expected_order = {\"FORWARD\", \"REVERSE\", \"TOP_HALF\", \"BOTTOM_HALF\", \"MIDDLE_OUT\"}\n        assert ALLOWED_CIPHER_ORDER == expected_order\n        assert isinstance(ALLOWED_CIPHER_ORDER, Set)\n\n    def test_failure_constants(self):\n        assert TOTAL_FAILURE == \"|||,|||,|||,|||,|||,|||,|||,|||,|||,|||\"\n        assert FAILED_PACKET == \"|||\"\n\n    def test_error_constants(self):\n        assert ERROR_INC_1 == b\"\\x0e\\xac\\x0b\"\n        assert ERROR_INC_2 == b\"\\x0f\\xf0\\x0b\"\n\n    def test_default_timeout(self):\n        assert DEFAULT_TIMEOUT == 20\n        assert isinstance(DEFAULT_TIMEOUT, int)\n\n    def test_constant_immutability(self):\n        with pytest.raises(AttributeError):\n            SSL_V3 = \"NewValue\"\n        \n        with pytest.raises(AttributeError):\n            ALLOWED_TLS_VERSIONS.add(\"NewVersion\")\n\n    def test_constant_types(self):\n        assert isinstance(SSL_V3, str)\n        assert isinstance(ALLOWED_TLS_VERSIONS, Set)\n        assert isinstance(ALL, str)\n        assert isinstance(ALLOWED_CIPHER_LISTS, Set)\n        assert isinstance(GREASE, str)\n        assert isinstance(ALLOWED_SUPPORT, Set)\n        assert isinstance(FORWARD, str)\n        assert isinstance(ALLOWED_EXTENSION_ORDER, Set)\n        assert isinstance(ALLOWED_CIPHER_ORDER, Set)\n        assert isinstance(TOTAL_FAILURE, str)\n        assert isinstance(ERROR_INC_1, bytes)\n        assert isinstance(DEFAULT_TIMEOUT, int)\n\n    def test_set_contents(self):\n        assert all(isinstance(item, str) for item in ALLOWED_TLS_VERSIONS)\n        assert all(isinstance(item, str) for item in ALLOWED_CIPHER_LISTS)\n        assert all(isinstance(item, str) for item in ALLOWED_SUPPORT)\n        assert all(isinstance(item, str) for item in ALLOWED_EXTENSION_ORDER)\n        assert all(isinstance(item, str) for item in ALLOWED_CIPHER_ORDER)\n\n    def test_constant_uniqueness(self):\n        all_constants = [\n            SSL_V3, TLS_1, TLS_1_1, TLS_1_2, TLS_1_3,\n            ALL, NO_1_3,\n            GREASE, NO_GREASE, ALPN, RARE_ALPN,\n            SUPPORT_1_2, SUPPORT_1_3, NO_SUPPORT,\n            FORWARD, REVERSE,\n            TOP_HALF, BOTTOM_HALF, MIDDLE_OUT,\n            TOTAL_FAILURE, FAILED_PACKET\n        ]\n        assert len(all_constants) == len(set(all_constants))\n\n    def test_set_uniqueness(self):\n        for set_constant in [ALLOWED_TLS_VERSIONS, ALLOWED_CIPHER_LISTS, ALLOWED_SUPPORT, ALLOWED_EXTENSION_ORDER, ALLOWED_CIPHER_ORDER]:\n            assert len(set_constant) == len(set(set_constant))\n",
        "test_results": {
            "passed": 19,
            "failed": 1,
            "test_details": {
                "failed_tests": [],
                "error_tests": []
            },
            "junit_report": "<?xml version=\"1.0\" encoding=\"utf-8\"?><testsuites><testsuite name=\"pytest\" errors=\"0\" failures=\"1\" skipped=\"0\" tests=\"20\" time=\"0.065\" timestamp=\"2025-02-04T10:08:17.103691+05:30\" hostname=\"Tilaks-MacBook-Air.local\"><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_tls_version_constants\" time=\"0.001\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_allowed_tls_versions\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_cipher_list_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_allowed_cipher_lists\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_grease_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_alpn_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_support_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_allowed_support\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_extension_order_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_allowed_extension_order\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_cipher_order_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_allowed_cipher_order\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_failure_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_error_constants\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_default_timeout\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_constant_immutability\" time=\"0.000\"><failure message=\"Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;\">self = &lt;jarm.baserock_generated_tests.baserock_test_constants.TestConstants object at 0x1045b3dd0&gt;\n\n    def test_constant_immutability(self):\n&gt;       with pytest.raises(AttributeError):\nE       Failed: DID NOT RAISE &lt;class 'AttributeError'&gt;\n\njarm/baserock_generated_tests/baserock_test_constants.py:88: Failed</failure></testcase><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_constant_types\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_set_contents\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_constant_uniqueness\" time=\"0.000\" /><testcase classname=\"baserock_generated_tests.baserock_test_constants.TestConstants\" name=\"test_set_uniqueness\" time=\"0.000\" /></testsuite></testsuites>"
        },
        "coverage": {
            "percentage": 100.0,
            "missing_lines": []
        }
    }
]